PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n" | <"//"(~["\r","\n"])*> | < "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" >;

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< EQUALS : "=" > | 
	< AND : "&&" > |
	< LESS : "<" > |
	< NEGATION : "!" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< INTEGER : (["0" - "9"])+ > | 
	< IMPORT : "import" > |
	< DOT : "." > |
	< COMMA : "," > |
	< SC : ";" > | 
	< CLASS: "class" > |
	< EXTENDS: "extends" > |
	< OPEN_BRACES : "{" > |
	< CLOSE_BRACES : "}" > |
	< PUBLIC : "public" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< OPEN_SQUARE : "[" > |
	< CLOSE_SQUARE : "]" > |
	< STRING : "String" > |
	< RETURN : "return" > |
	< INT : "int" > |
	< BOOLEAN : "boolean" > | 
	< IF : "if" > | 
	< ELSE : "else" > |
	< WHILE : "while" > |
	< LENGTH : "length" > | 
	< TRUE : "true" > | 
	< FALSE : "false" > | 
	< THIS : "this" > |
	< NEW : "new" > | 
	< IDENTIFIER : ["A"- "Z", "a" - "z", "_", "$"](["0" - "9", "A"- "Z", "a" - "z", "_", "$"])* > 
;


Program: (ImportDeclaration)* ClassDeclaration < EOF >;

ImportDeclaration: < IMPORT > < IDENTIFIER >  (SubImport)* < SC > ;

SubImport : < DOT > < IDENTIFIER > ;

ClassDeclaration: < CLASS > < IDENTIFIER >  (< EXTENDS > < IDENTIFIER > )? < OPEN_BRACES > (VarDeclaration)* (MethodDeclaration)* < CLOSE_BRACES >;

VarDeclaration: Type < IDENTIFIER >  < SC >;

MethodDeclaration: < PUBLIC > (MainMethodDeclaration | OtherMethodDeclaration);

MainMethodDeclaration: 	< STATIC > < VOID > < MAIN > < OPEN_PAREN > < STRING > < OPEN_SQUARE > < CLOSE_SQUARE > < IDENTIFIER >  < CLOSE_PAREN > < OPEN_BRACES > MethodBody < CLOSE_BRACES >;

OtherMethodDeclaration: Type < IDENTIFIER >  < OPEN_PAREN > (Argument  (< COMMA > Argument )*)? < CLOSE_PAREN > < OPEN_BRACES > MethodBody < RETURN > Expression < SC > < CLOSE_BRACES > ;

Argument: Type < IDENTIFIER >;

MethodBody: (SCAN 2 VarDeclaration)* (Statement)*;

Type: 	< INT > (< OPEN_SQUARE > < CLOSE_SQUARE >)? | 
		< BOOLEAN > | 
		< IDENTIFIER > ;

Statement:	< OPEN_BRACES > (Statement)* < CLOSE_BRACES > | 
			IfStatement |
			WhileStatement | 
			Expression (< EQUALS > Expression)? < SC >;

IfStatement: < IF > < OPEN_PAREN > Expression < CLOSE_PAREN > Statement < ELSE > Statement ;

WhileStatement: < WHILE > < OPEN_PAREN > Expression < CLOSE_PAREN > Statement ;

Expression:	ExpressionLess (< AND > ExpressionLess)*;

ExpressionLess: ExpressionAddSub (< LESS > ExpressionAddSub)*;

ExpressionAddSub: ExpressionMultDiv ((< PLUS > ExpressionMultDiv) | (< MINUS > ExpressionMultDiv))*;

ExpressionMultDiv: ExpressionArray ((< TIMES > ExpressionArray) | (< DIVIDE > ExpressionArray))*;

ExpressionArray: ExpressionNegate (< OPEN_SQUARE > Expression < CLOSE_SQUARE > )?;

ExpressionNegate: ExpressionDot | < NEGATION > ExpressionNegate;

ExpressionDot: FinalTerm ( < DOT > ( < LENGTH > | MethodCall))*;

MethodCall: < IDENTIFIER > < OPEN_PAREN > (Parameter)? < CLOSE_PAREN >;

Parameter: Expression ( < COMMA > Expression)*;

FinalTerm:	< INTEGER > |
			< TRUE > |
			< FALSE > |
			< IDENTIFIER > |
			< THIS > |
			< NEW > (< INT > < OPEN_SQUARE > Expression < CLOSE_SQUARE > | < IDENTIFIER >  < OPEN_PAREN > < CLOSE_PAREN >) |
			< OPEN_PAREN > Expression < CLOSE_PAREN > ;

